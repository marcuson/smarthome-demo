[
    {
        "id": "2428567bf296a96c",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "795c55114332f94b",
        "type": "mqtt out",
        "z": "2428567bf296a96c",
        "name": "Publish to mqtt",
        "topic": "",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cd4ec2ba4b1ee254",
        "x": 580,
        "y": 80,
        "wires": []
    },
    {
        "id": "a980b7644d8446a1",
        "type": "inject",
        "z": "2428567bf296a96c",
        "name": "Init device",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "eca7c312edcacbec",
                "7e5c3f751258af72",
                "979c5bf553f4ae95"
            ]
        ]
    },
    {
        "id": "eca7c312edcacbec",
        "type": "function",
        "z": "2428567bf296a96c",
        "name": "define main switch",
        "func": "msg.payload = {\n    availability: {\n        topic: \"devices/switches/led/available\",\n    },\n    command_topic: \"devices/switches/led/state/set\",\n    device: {\n        identifiers: [\"led_switch\"],\n        name: \"LED switch\"\n    },\n    device_class: \"outlet\",\n    entity_category: \"config\",\n    icon: \"mdi:lightning-bolt\",\n    name: \"LED switch\",\n    state_topic: \"devices/switches/led/state\",\n    qos: 2,\n    unique_id: \"led_switch\",\n};\nmsg.topic = \"homeassistant/switch/led/config\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "795c55114332f94b"
            ]
        ]
    },
    {
        "id": "7e5c3f751258af72",
        "type": "function",
        "z": "2428567bf296a96c",
        "name": "define availability",
        "func": "msg.payload = \"online\";\nmsg.topic = \"devices/switches/led/available\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "795c55114332f94b"
            ]
        ]
    },
    {
        "id": "f54e8c4b452184b5",
        "type": "mqtt in",
        "z": "2428567bf296a96c",
        "name": "Set from mqtt",
        "topic": "devices/switches/led/state/set",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cd4ec2ba4b1ee254",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 320,
        "wires": [
            [
                "c0f53a5ec92bd4af"
            ]
        ]
    },
    {
        "id": "aef2ec3b67558b59",
        "type": "inject",
        "z": "2428567bf296a96c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "c0f53a5ec92bd4af"
            ]
        ]
    },
    {
        "id": "bfaa7b501989de8c",
        "type": "inject",
        "z": "2428567bf296a96c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "OFF",
        "payloadType": "str",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "c0f53a5ec92bd4af"
            ]
        ]
    },
    {
        "id": "76b4c6cf5dcd0cf3",
        "type": "http request",
        "z": "2428567bf296a96c",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 320,
        "wires": [
            [
                "95a0683b37fcb471"
            ]
        ]
    },
    {
        "id": "f9e631b6737109c2",
        "type": "inject",
        "z": "2428567bf296a96c",
        "name": "Every 10 sec",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "a2b4a1a235564938"
            ]
        ]
    },
    {
        "id": "246cdf7a91c92f0f",
        "type": "http request",
        "z": "2428567bf296a96c",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 220,
        "wires": [
            [
                "95a0683b37fcb471"
            ]
        ]
    },
    {
        "id": "a2b4a1a235564938",
        "type": "function",
        "z": "2428567bf296a96c",
        "name": "prepare req",
        "func": "msg.url = flow.get(\"ledUrl\") + \"/state\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 220,
        "wires": [
            [
                "246cdf7a91c92f0f"
            ]
        ]
    },
    {
        "id": "979c5bf553f4ae95",
        "type": "change",
        "z": "2428567bf296a96c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ledUrl",
                "pt": "flow",
                "to": "http://192.168.1.208",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "c029414425106910",
        "type": "mqtt out",
        "z": "2428567bf296a96c",
        "name": "Update mqtt state",
        "topic": "devices/switches/led/state",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cd4ec2ba4b1ee254",
        "x": 870,
        "y": 260,
        "wires": []
    },
    {
        "id": "c0f53a5ec92bd4af",
        "type": "function",
        "z": "2428567bf296a96c",
        "name": "prepare http",
        "func": "msg.originalPayload = msg.payload;\nmsg.url = flow.get(\"ledUrl\") + \"/control\";\nmsg.payload = { \n    state: msg.payload.toLowerCase(),\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 320,
        "wires": [
            [
                "76b4c6cf5dcd0cf3"
            ]
        ]
    },
    {
        "id": "95a0683b37fcb471",
        "type": "function",
        "z": "2428567bf296a96c",
        "name": "set state",
        "func": "msg.payload = msg.payload.state.toUpperCase();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 260,
        "wires": [
            [
                "c029414425106910"
            ]
        ]
    },
    {
        "id": "cd4ec2ba4b1ee254",
        "type": "mqtt-broker",
        "name": "Mosquitto",
        "broker": "mqtt",
        "port": "1883",
        "clientid": "nodered",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]